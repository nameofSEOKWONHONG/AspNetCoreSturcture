<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="info"
      internalLogFile="H:\github-new-mine\AspNetCoreSturcture\WebAPI\NeonCore.WebAPI\bin\Debug\netcoreapp2.0\Logs\internal-nlog.txt">

  <extensions>
    <!--<add assembly="NLog.Targets.ElasticSearch"/>-->
    <add assembly="NLog.Web.AspNetCore"/>
  </extensions>
  
  <!-- the targets to write to -->
  <targets>
    <!-- write logs to file  -->
    <target xsi:type="File" name="allfile" fileName="${basedir}/logs/nlog-all-${shortdate}.log"
            layout="${longdate}|${event-properties:item=EventId.Id}|${uppercase:${level}}|${logger}|${message} ${exception}" />

    <!-- another file log, only own logs. Uses some ASP.NET core renderers -->
    <target xsi:type="File" name="ownFile-web" fileName="${basedir}/logs/nlog-own-${shortdate}.log"
            layout="${longdate}|${event-properties:item=EventId.Id}|${uppercase:${level}}|${logger}|${message} ${exception}|url: ${aspnet-request-url}|action: ${aspnet-mvc-action}" />

    <!-- write to the void aka just remove -->
    <target xsi:type="Null" name="blackhole" />

    <!--<target name="ElasticSearch" xsi:type="BufferingWrapper" flushTimeout="5000">
      <target xsi:type="ElasticSearch"/>
    </target>-->

    <!-- write logs to file -->
    <target name="file"
            xsi:type="File"
            layout="${longdate}|${pad:padding=5:inner=${level:uppercase=true}}|${message}|${exception}|${exception:stacktrace}"
            fileName="${basedir}/logs/${shortdate}.log"
            encoding="UTF-8"
            archiveFileName="${basedir}/logs/archives/archive.{#}.log"
            archiveEvery="Day"
            archiveNumbering="Rolling"
            maxArchiveFiles="7"
            header="[Start Logging]"
            footer="[End Logging]${newline}"
    />

    <!-- database target -->
    <target name="database" xsi:type="Database" >
      <connectionString>${var:connectionString}</connectionString>
      <!--
      Remarks:
        The appsetting layouts require the NLog.Extended assembly.
        The aspnet-* layouts require the NLog.Web assembly.
        The Application value is determined by an AppName appSetting in Web.config.
        The "NLogDb" connection string determines the database that NLog write to.
        The create dbo.Log script in the comment below must be manually executed.

        Script for creating the dbo.Log table.

        SET ANSI_NULLS ON
        SET QUOTED_IDENTIFIER ON
        CREATE TABLE [dbo].[Log] (
        [Id] [int] IDENTITY(1,1) NOT NULL,
        [Application] [nvarchar](50) NOT NULL,
        [Logged] [datetime] NOT NULL,
        [Level] [nvarchar](50) NOT NULL,
        [Message] [nvarchar](max) NOT NULL,
        [Logger] [nvarchar](250) NULL,
        [Callsite] [nvarchar](max) NULL,
        [Exception] [nvarchar](max) NULL,
        CONSTRAINT [PK_dbo.Log] PRIMARY KEY CLUSTERED ([Id] ASC)
        WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
        ) ON [PRIMARY]
      -->
      <commandText>
        insert into dbo.Log (
        Application, Logged, Level, Message,
        Logger, CallSite, Exception
        ) values (
        @Application, @Logged, @Level, @Message,
        @Logger, @Callsite, @Exception
        );
      </commandText>

      <parameter name="@application" layout="NeonCore.WebAPI" />
      <parameter name="@logged" layout="${date}" />
      <parameter name="@level" layout="${level}" />
      <parameter name="@message" layout="url: ${aspnet-request-url} | action: ${aspnet-mvc-action} | ${message}" />

      <parameter name="@logger" layout="${logger}" />
      <parameter name="@callSite" layout="${callsite:filename=true}" />
      <parameter name="@exception" layout="${exception:tostring}" />   
    </target>
  </targets>

  <!-- rules to map from logger name to target -->
  <rules>
    <!--All logs, including from Microsoft-->
    <logger name="*" minlevel="Trace" writeTo="allfile" />

    <!--<logger name="*" minlevel="Trace" writeTo="ElasticSearch" />-->

    <logger name="*" minlevel="Trace" writeTo="database" />

    <!--Skip Microsoft logs and so log only own logs-->
    <logger name="Microsoft.*" minlevel="Trace" writeTo="blackhole" final="true" />
    <logger name="*" minlevel="Trace" writeTo="ownFile-web" />
    
    <logger name="*" minlevel="Trace" writeTo="file" />
  </rules>
</nlog>